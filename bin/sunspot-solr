#!/usr/bin/env ruby
using_gems = false
begin
  require 'fileutils'
  require 'tempfile'
  require 'tmpdir'
  require 'optparse'
  require 'daemons'
rescue LoadError => e
  foo
  if using_gems
    raise(e)
  else
    using_gems = true
    require 'rubygems'
    retry
  end
end

working_directory = FileUtils.pwd
solr_home = File.expand_path(File.join(File.dirname(__FILE__), '..', 'solr'))

port      = '8983'
data_dir  = File.expand_path(File.join(Dir.tmpdir, 'solr_data'))
home      = nil
pid_dir   = working_directory
log_file  = nil
log_level = 'OFF'

OptionParser.new do |opts|
  opts.banner = "Usage: sunspot-solr start [options]"

  opts.on '-p', '--port=PORT', 'Port on which to run Solr (default 8983)' do |p|
    port = p
  end

  opts.on '-d', '--data-directory=DIRECTORY', 'Solr data directory' do |d|
    data_dir = File.expand_path(d)
  end

  opts.on '-s', '--solr-home=HOME', 'Solr home directory (should contain conf/ directory)' do |s|
    solr_home = File.expand_path(s)
  end

  opts.on '--pid-dir=PID_DIR', 'Directory for pid files' do |pd|
    pid_dir = File.expand_path(pd)
  end

  opts.on '-l', '--log-level=LOG_LEVEL', 'Solr logging level' do |l|
    log_level = l
  end

  opts.on '--log-file=LOG_FILE', 'Path to Solr log file' do |lf|
    log_file = File.expand_path(lf)
  end
end.parse!

options = { :dir_mode => :normal, :dir => pid_dir }

def logging_properties( log_file, log_level )
  temp_file = Tempfile.new 'logging.properties'
  temp_file << <<PROPERTIES
.level = #{log_level}
handlers = java.util.logging.FileHandler
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.pattern   = #{log_file}
PROPERTIES
  temp_file.flush
  temp_file.close
  temp_file.path
end

Daemons.run_proc('sunspot-solr', options) do
  FileUtils.cd(solr_home) do
    args = ['java']
    args << "-Djetty.port=#{port}" if port
    args << "-Dsolr.data.dir=#{data_dir}" if data_dir
    args << "-Dsolr.solr.home=#{home}" if home
    args << "-Djava.util.logging.config.file=#{logging_properties(log_file, log_level)}" if log_file and log_level != 'OFF'
    args << '-jar' << 'start.jar'
    STDERR.puts(args * ' ')
    Kernel.exec(*args)
  end
end
